#include <fstream>
#include "SingletonLogger.hpp"
#include "Triangulation.hpp"

/*
	Alexander Žilyakov, Sep 2016
*/

double u1(Node const & p) { // first velocity component
	return sin(4. * p * p);
}

double u2(Node const & p) { // second ″
	return p.x() + 2. * p.y();
}

double p(Node const & point) { // pressure
	return point.norm();
}

int main() {
	// path
	string iPath("Mathematica/Generate Mesh/"),
	       oPath("Mathematica/Draw Interpolant/");
	// initial mesh generated by Mathematica
	ifstream iNodes    (iPath + "nodes.dat"),
	         iTriangles(iPath + "triangles.dat"),
	         iNeighbors(iPath + "neighbors.dat");
	// resulting fine mesh
	ofstream oFineNodes      (oPath + "nodes.dat"),
	         oFineTriangles  (oPath + "triangles.dat"),
	         oFineRibs       (oPath + "ribs.dat"),
		     oU1   (oPath + "u1.dat"),
		     oU2   (oPath + "u2.dat"),
		     oP    (oPath + "p.dat");
	// logger
	SingletonLogger& logger = SingletonLogger::instance();
	try {
		logger.beg("load initial mesh from " + iPath);
			Triangulation Omega(iNodes, iTriangles, iNeighbors);
		logger.end();

		logger.inp("enter numb of refinements");
		size_t refCount = 1;
		cin >> refCount;
		
		logger.beg("refine and save mesh to " + oPath);
			Omega.refine(refCount);
			RibsNumeration middleNodesNumeration = Omega.computeRibsNumeration();
			Omega.save(oFineNodes, oFineTriangles);
			oFineRibs << middleNodesNumeration;
		logger.end();

		logger.beg("compute interpolation coefs of u1, u2, and p\nsave results to " + oPath);
			// velocity
			vector<Node>   middleNodes = Omega.computeMiddleNodes(middleNodesNumeration);
			vector<double> u1Vec(middleNodes.size()), u2Vec(middleNodes.size());
			for (size_t i = 0; i < middleNodes.size(); ++i) {
				u1Vec[i] = u1(middleNodes[i]);
				u2Vec[i] = u2(middleNodes[i]);
			}			
			oU1 << u1Vec;
			oU2 << u2Vec;
			// pressure
			vector<double> pVec(Omega.numbOfTriangles());
			for (size_t i = 0; i < Omega.numbOfTriangles(); ++i)
				pVec[i] = p(Omega.centroid(i));
			oP << pVec;
		logger.end();
	}
	catch (exception const & e) {
		logger.err(e.what());
	}
}