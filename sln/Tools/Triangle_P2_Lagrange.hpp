#pragma once
#include "AbstractFiniteElement.hpp"

class Triangle_P2_Lagrange
	: public TriangularScalarFiniteElement {
	// singleton
	Triangle_P2_Lagrange() : AbstractFiniteElement(2.) {}
	Triangle_P2_Lagrange(Triangle_P2_Lagrange const &);
	Triangle_P2_Lagrange& operator=(Triangle_P2_Lagrange const &);
public:
	static auto& instance() {
		static Triangle_P2_Lagrange single;
		return single;
	}
	std::vector<SmartScalarField2D> getShapesOf(Triangle const & t) const final {
		return {
			[&](Node2D const & p) {
				return (((-2.*p[1] + t[0][1] + t[1][1])*t[2][0] + t[1][0] * (2.*p[1] - t[0][1] - t[2][1]) - (2.*p[0] - t[0][0])*(t[1][1] - t[2][1]))*
					   ((-p[1] + t[1][1])*t[2][0] + t[1][0] * (p[1] - t[2][1]) + p[0] * (-t[1][1] + t[2][1]))) / 4. / pow(area(t), 2);
			},
			[&](Node2D const & p) {
				return (((-2.*p[1] + t[0][1] + t[1][1])*t[2][0] - (2.*p[0] - t[1][0])*(t[0][1] - t[2][1]) + t[0][0] * (2.*p[1] - t[1][1] - t[2][1]))*
					   ((-p[1] + t[0][1])*t[2][0] + t[0][0] * (p[1] - t[2][1]) + p[0] * (-t[0][1] + t[2][1]))) / 4. / pow(area(t), 2);
			},
			[&](Node2D const & p) {
				return (((-p[1] + t[0][1])*t[1][0] + t[0][0] * (p[1] - t[1][1]) + p[0] * (-t[0][1] + t[1][1]))*(-(t[0][1] - t[1][1])*(2.*p[0] - t[2][0]) +
					   t[0][0] * (2.*p[1] - t[1][1] - t[2][1]) + t[1][0] * (-2.*p[1] + t[0][1] + t[2][1]))) / 4. / pow(area(t), 2);
			},
			[&](Node2D const & p) {
				return (4.*((p[1] - t[0][1])*t[1][0] + p[0] * (t[0][1] - t[1][1]) + t[0][0] * (-p[1] + t[1][1]))*
				       ((-p[1] + t[0][1])*t[2][0] + t[0][0] * (p[1] - t[2][1]) + p[0] * (-t[0][1] + t[2][1]))) / 4. / pow(area(t), 2);
			},
			[&](Node2D const & p) {
				return (4.*((-p[1] + t[0][1])*t[1][0] + t[0][0] * (p[1] - t[1][1]) + p[0] * (-t[0][1] + t[1][1]))*
				       ((-p[1] + t[1][1])*t[2][0] + t[1][0] * (p[1] - t[2][1]) + p[0] * (-t[1][1] + t[2][1]))) / 4. / pow(area(t), 2);
			},
			[&](Node2D const & p) {
				return (4.*((p[1] - t[1][1])*t[2][0] + p[0] * (t[1][1] - t[2][1]) + t[1][0] * (-p[1] + t[2][1]))*
				       ((-p[1] + t[0][1])*t[2][0] + t[0][0] * (p[1] - t[2][1]) + p[0] * (-t[0][1] + t[2][1]))) / 4. / pow(area(t), 2);
			}
		};
	}
	std::vector<SmartVectorField2D> getSGradsOf(Triangle const & t) const final {
		return {
			[&](Node2D const & p) {
				return Node2D { { 
						(t[1][1] - t[2][1])*(t[1][1] * (4.*p[0] - t[0][0] - 3.*t[2][0]) + t[0][1] * (t[1][0] - t[2][0]) + 4.*p[1] * (-t[1][0] + t[2][0]) + (-4.*p[0] + t[0][0] + 3.*t[1][0])*t[2][1]),
						(t[1][0] - t[2][0])*(4.*p[1] * (t[1][0] - t[2][0]) + t[0][1] * (-t[1][0] + t[2][0]) + t[1][1] * (-4.*p[0] + t[0][0] + 3.*t[2][0]) + (4.*p[0] - t[0][0] - 3.*t[1][0])*t[2][1])
					} } / 4. / pow(area(t), 2);
			},
			[&](Node2D const & p) {
				return Node2D { {
						(t[0][1] - t[2][1])*(-t[0][1] * t[1][0] - (3.*t[0][1] + t[1][1])*t[2][0] + 4.*p[1] * (-t[0][0] + t[2][0]) + 4.*p[0] * (t[0][1] - t[2][1]) + t[1][0] * t[2][1] + t[0][0] * (t[1][1] + 3.*t[2][1])),
						(t[0][0] - t[2][0])*(t[0][1] * (-4.*p[0] + t[1][0]) + 4.*p[1] * (t[0][0] - t[2][0]) + (3.*t[0][1] + t[1][1])*t[2][0] + 4.*p[0] * t[2][1] - t[1][0] * t[2][1] - t[0][0] * (t[1][1] + 3.*t[2][1]))
					} } / 4. / pow(area(t), 2);
			},
			[&](Node2D const & p) {
				return Node2D { {
						(t[0][1] - t[1][1])*(4.*p[1] * (-t[0][0] + t[1][0]) + 4.*p[0] * (t[0][1] - t[1][1]) + t[1][1] * (3.*t[0][0] + t[2][0]) - t[0][1] * (3.*t[1][0] + t[2][0]) + (t[0][0] - t[1][0])*t[2][1]),
						(t[0][0] - t[1][0])*(4.*p[1] * (t[0][0] - t[1][0]) + 4.*p[0] * (-t[0][1] + t[1][1]) - t[1][1] * (3.*t[0][0] + t[2][0]) + t[0][1] * (3.*t[1][0] + t[2][0]) + (-t[0][0] + t[1][0])*t[2][1])
					} } / 4. / pow(area(t), 2);
			},
			[&](Node2D const & p) {
				return Node2D { {
						(t[0][1] * (p[0] - t[1][0]) + p[1] * (-t[0][0] + t[1][0]) + (-p[0] + t[0][0])*t[1][1])*(-t[0][1] + t[2][1]) + (t[0][1] - t[1][1])*(p[1] * (t[0][0] - t[2][0]) + t[0][1] * (-p[0] + t[2][0]) + (p[0] - t[0][0])*t[2][1]),
						(t[0][1] * (p[0] - t[1][0]) + p[1] * (-t[0][0] + t[1][0]) + (-p[0] + t[0][0])*t[1][1])*(t[0][0] - t[2][0]) + (-t[0][0] + t[1][0])*(p[1] * (t[0][0] - t[2][0]) + t[0][1] * (-p[0] + t[2][0]) + (p[0] - t[0][0])*t[2][1])
					} } / pow(area(t), 2);
			},
			[&](Node2D const & p) {
				return Node2D { {
						(p[1] * (t[0][0] - t[1][0]) + t[0][1] * (-p[0] + t[1][0]) + (p[0] - t[0][0])*t[1][1])*(-t[1][1] + t[2][1]) + (-t[0][1] + t[1][1])*(p[1] * (t[1][0] - t[2][0]) + t[1][1] * (-p[0] + t[2][0]) + (p[0] - t[1][0])*t[2][1]),
						(p[1] * (t[0][0] - t[1][0]) + t[0][1] * (-p[0] + t[1][0]) + (p[0] - t[0][0])*t[1][1])*(t[1][0] - t[2][0]) + (t[0][0] - t[1][0])*(p[1] * (t[1][0] - t[2][0]) + t[1][1] * (-p[0] + t[2][0]) + (p[0] - t[1][0])*t[2][1])
					} } / pow(area(t), 2);
			},
			[&](Node2D const & p) {
				return Node2D { { 
						(t[1][1] - t[2][1])*(p[1] * (t[0][0] - t[2][0]) + t[0][1] * (-p[0] + t[2][0]) + (p[0] - t[0][0])*t[2][1]) + (-t[0][1] + t[2][1])*(t[1][1] * (p[0] - t[2][0]) + p[1] * (-t[1][0] + t[2][0]) + (-p[0] + t[1][0])*t[2][1]), 
						(-t[1][0] + t[2][0])*(p[1] * (t[0][0] - t[2][0]) + t[0][1] * (-p[0] + t[2][0]) + (p[0] - t[0][0])*t[2][1]) + (t[0][0] - t[2][0])*(t[1][1] * (p[0] - t[2][0]) + p[1] * (-t[1][0] + t[2][0]) + (-p[0] + t[1][0])*t[2][1])
					} } / pow(area(t), 2);
			}
		};
	}
};